{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\heman\\\\graphql\\\\client\\\\src\\\\components\\\\Client.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery } from '@apollo/client';\nimport ClientRow from './ClientRow';\nimport { GET_CLIENTS } from './queries/clientQueries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = [{\n  id: \"1\",\n  name: \"user\",\n  email: \"email@gmail.com\",\n  phone: \"1111111\"\n}, {\n  id: \"2\",\n  name: \"Admin\",\n  email: \"email@gmail.com\",\n  phone: \"111111\"\n}];\nexport default function Client() {\n  _s();\n  // Fetch the list of clients using the GET_CLIENTS query\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_CLIENTS);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Clients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), data && data.clients && data.clients.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-hover mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.clients.map(client => /*#__PURE__*/_jsxDEV(ClientRow, {\n          client: client\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No clients available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Client, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = Client;\nvar _c;\n$RefreshReg$(_c, \"Client\");","map":{"version":3,"names":["React","useQuery","ClientRow","GET_CLIENTS","jsxDEV","_jsxDEV","client","id","name","email","phone","Client","_s","loading","error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","message","clients","length","className","map","_c","$RefreshReg$"],"sources":["C:/Users/heman/graphql/client/src/components/Client.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport ClientRow from './ClientRow';\r\nimport { GET_CLIENTS } from './queries/clientQueries';\r\n\r\n\r\nconst client =[{\r\n    id : \"1\",\r\n    name:\"user\",\r\n    email:\"email@gmail.com\",\r\n    phone:\"1111111\"\r\n  },\r\n  \r\n  {\r\n    id:\"2\",\r\n    name:\"Admin\",\r\n    email:\"email@gmail.com\",\r\n    phone:\"111111\"\r\n  }\r\n  \r\n  ]\r\n\r\nexport default function Client() {\r\n  // Fetch the list of clients using the GET_CLIENTS query\r\n  const { loading, error, data } = useQuery(GET_CLIENTS);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Clients</h1>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error: {error.message}</p>}\r\n      {data && data.clients && data.clients.length > 0 ? (\r\n        <table className=\"table table-hover mt-3\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Email</th>\r\n              <th>Phone</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.clients.map((client) => (\r\n              <ClientRow client={client} />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <p>No clients available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}